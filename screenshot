#!/usr/bin/env bash

show_usage() {
    printf "\n\nusage: $0 [--config <config-file>] [--frame]

Build screenshots for flutter project for upload to Apple and Play Store

where:
    --config <config-file>
        file describing emulators/simulators to run
        default is 'screenshots/config.json'
    --frame
        frame the screenshots
        (default is no frames)

Note: requires a flutter integration test that saves screenshots in the 'screenshots' directory

Dependencies:
    jq: to parse config.yaml and devices.yaml
    yq: to parse config.yaml and devices.yaml
    imagemagick: to frame screenshots
"
    exit 1
}

screenshots(){
  local os=$1
  #local emulator=$2
  local locale=$2
  local test_file=$3
  local dir=$4

  rm $dir/*.png

  # assume screenshot files written in alpha-numeric order to screenshots directory
  flutter driver $test_file $dir

  # move files to destination
  if [ $os == "ios" ]; then
    mv $dir/*.png $os/fastlane/screenshots/$locale
  else
    mv $dir/*.png $os/fastlane/metadata/android/$locale/images/phoneScreenshots
  fi
}

frame(){
#  local screenType=$1
  local frameFile=$1
  local screenshotFile=$2
  local size=$3
  local resize=$4

  filename=$(basename -- "$screenshotFile")
  dirname=$(dirname -- "$screenshotFile")
  extension="${filename##*.}"
  filename="${filename%.*}"

#          \( "$screenshotFile" -resize 919x1634! \) -gravity center  -composite \

#  case $screenType in
#    5.5)
#      resizePercent="75%"
#      convert -size $size xc:none \
      convert -size $size xc:skyblue \
          \( "$frameFile" -resize $resize \) -gravity center -composite \
          \( "$screenshotFile" -resize $resize \) -gravity center  -composite \
          $dirname/"$filename"_framed.$extension
      open $dirname/"$filename"_framed.$extension
#      ;;
#    *)
#      echo "Error: unknown screenType: $screenType"
#      exit 1
#      ;;
#  esac
}

# start/stop emulator
emulator(){
  local emulatorName=$1
  local locale=$2 # ignored for now
  local stop=$3
  # adb shell pm grant <package name> android.permission.CHANGE_CONFIGURATION
  if [ $stop == "stop" ]; then
#    adb -s $emulatorName emu kill
    adb emu kill
  else
    # start emulator
    flutter emulator --launch $emulatorName
    ./script/android-wait-for-emulator
  fi
}

# start/stop simulator
simulator(){
  local emulatorName=$1
  local locale=$2 # ignored for now
  local stop=$3
#  if [ -z "stop" ]; then
#    adb -s $emulatorName emu kill
#  else
#    flutter emulator --launch $emulatorName
#  fi

}

# process config file
#removeQuotes(){
#  local str=$1
#  sed -e 's/^"//' -e 's/"$//' <<<"$str"
#}


#set -x
# for filenames with spaces
IFS=$'\n'
#case $1 in
#  --config-file)
#    ;;
#  --frame)
#    ;;
#esac
#frame "5.5" "screenshots/Phones/Apple iPhone 7 Plus/Device/Apple iPhone 7 Plus Silver.png" "screenshots/ios/Iphone 7 Plus/0.png"
configFile=screenshots/config.yaml

#screenShotsDir=$(removeQuotes `yq .output_directory $configFile`)
screenShotsDir=`yq .output_directory $configFile`
#echo $screenShotsDir
#
#yq -c -r '.locales[]' $configFile | while read locale; do
#    echo $(removeQuotes $locale)
#done
#
#yq -c '.devices.ios[]' $configFile | while read iosDevice; do
#    echo $(removeQuotes $iosDevice)
#done
#
#frame=$(removeQuotes `yq .frame $configFile`)
#echo $frame

yq -c -r '.locales[]' $configFile | while read locale; do
  yq -c -r '.devices.android[]' $configFile | while read androidDevice; do
#    locale=$(removeQuotes $locale)
#    androidDevice=$(removeQuotes $androidDevice)
    echo $locale $androidDevice
    # start emulator
#    emulator $androidDevice $locale start
    yq -c -r '.tests[]' $configFile | while read test; do
#      test=$(removeQuotes $test)
#      flutter driver test_driver/$test
#      frame=$(removeQuotes `yq .frame $configFile`)
      frame=`yq -r .frame $configFile`
      if [ $frame == true ]; then
        devicesFile=screenshots/devices.yaml
        echo $frame $devicesFile
        # place frame around each screenshot
        yqStr="map(select( any(.phones[]; .name == \"${androidDevice}\" ))) | .[]"
        echo $yqStr
        set -x
        for screenshot in screenshots/*.png; do
          echo $screenshot
          [ -e "$screenshot" ] || (echo "Error: no screenshots found" && show_usage)
          frameFile=`yq -r $yqStr.frame $devicesFile`
          size=`yq -r $yqStr.size $devicesFile`
          resize=`yq -r $yqStr.resize $devicesFile`
          frame $frameFile $screenshot $size $resize
          exit
        done
      fi
    done
    # stop emulator
#    emulator $androidDevice $locale stop
  done
done
frameFile="./screenshots/Phones/Nexus 5X/Device/Nexus 5x.png"
screenshotFile="./screenshots/0.png"
size=1080x1920
resize=79.5%
#statusbarFile="./screenshots/android/1080/statusbar.png"
statusbarFile="statusbar.png"
#navbarFile="./screenshots/android/1080/navbar.png"
navbarFile="navbar.png"
#framedFile="./screenshots/0_framed.png"
framedFile="framed.png"
screenshotOffset="-4-9"

#convert $statusbarFile -fuzz 5% -transparent grey statusbar_transparent.png
#convert $statusbarFile -alpha off +dither -colors 2 -alpha on statusbar_transparent.png
#convert $statusbarFile -fuzz 5% -transparent grey statusbar_transparent.png
#convert -size 1080x62 xc:"gray(80,80,80)" xc:gray xc:"gray(200,200,200)" +append graybar.png
#convert -size 360x62 xc:"gray(80,80,80)" xc:gray xc:"gray(200,200,200)" +append graybar.png
#convert $screenshotFile \( $statusbarFile -fill "rgba(128,128,128,0.5)" -fuzz 4% -opaque rgba\(200,200,200\) \) -composite result.png
#open result.png

#convert statusbar.png -resize 1080x126 statusbar_resized.png
#open statusbar_resized.png

#set -x
#composite -gravity north $screenshotFile $statusbarFile screenshot_statusbar.png
#composite -blend 60 -gravity north $statusbarFile $screenshotFile screenshot_statusbar.png
#composite -transparent white -gravity north $statusbarFile $screenshotFile screenshot_statusbar.png
#convert $screenshotFile \( "$statusbarFile" -resize $resize \) -composite screenshot_statusbar.png

# overlay status bar over screenshot
#convert $screenshotFile $statusbarFile -composite screenshot_statusbar.png
#open screenshot_statusbar.png

# append navbar to bottom of screenshot (1080x126)
#convert -append screenshot_statusbar.png navbar.png final_screenshot.png
#open final_screenshot.png

# frame screenshot
#convert -size $size xc:skyblue \
#          \( "$frameFile" -resize $resize \) -gravity center -composite \
#          \( final_screenshot.png -resize $resize \) -gravity center -geometry -4-9 -composite \
#          framed.png
#open framed.png

# roll all commands into one
# 1. overlay semi-transparent status bar over screenshot
# 2. append navbar to bottom of screenshot (1080x126) and resize
# 3. resize and center frame
# 4. center screenshot and overlay over frame with offset from center
convert -size $size xc:skyblue \
          \( $frameFile -resize $resize \) -gravity center -composite \
          \( \( \( $screenshotFile $statusbarFile -gravity north -composite \) \
          $navbarFile -append \) -resize $resize \) \
          -gravity center -geometry $screenshotOffset -composite \
          $framedFile
open $framedFile

#convert -size $size xc:skyblue \
#          \( "$frameFile" -resize $resize \) -gravity center -composite \
#          \( "$screenshotFile" -resize $resize \) -gravity center  -composite \
#          $framedFile
#open $framedFile